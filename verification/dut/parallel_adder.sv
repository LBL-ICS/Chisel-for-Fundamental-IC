// Generated by CIRCT firtool-1.62.0
module adder(
  input  [31:0] io_in_a,
                io_in_b,
  output [32:0] io_out_s
);

  assign io_out_s = {1'h0, io_in_a + io_in_b};
endmodule

module parallel_adder(
  input         clock,
                reset,
  input  [31:0] io_in_a_0,
                io_in_a_1,
                io_in_a_2,
                io_in_a_3,
                io_in_b_0,
                io_in_b_1,
                io_in_b_2,
                io_in_b_3,
  output [31:0] io_out_s_0,
                io_out_s_1,
                io_out_s_2,
                io_out_s_3
);

  wire [32:0] _adder_3_io_out_s;
  wire [32:0] _adder_2_io_out_s;
  wire [32:0] _adder_1_io_out_s;
  wire [32:0] _adder_io_out_s;
  reg  [31:0] register_layer_0;
  reg  [31:0] register_layer_1;
  reg  [31:0] register_layer_2;
  reg  [31:0] register_layer_3;
  always @(posedge clock) begin
    if (reset) begin
      register_layer_0 <= 32'h0;
      register_layer_1 <= 32'h0;
      register_layer_2 <= 32'h0;
      register_layer_3 <= 32'h0;
    end
    else begin
      register_layer_0 <= _adder_io_out_s[31:0];
      register_layer_1 <= _adder_1_io_out_s[31:0];
      register_layer_2 <= _adder_2_io_out_s[31:0];
      register_layer_3 <= _adder_3_io_out_s[31:0];
    end
  end // always @(posedge)
  adder adder (
    .io_in_a  (io_in_a_0),
    .io_in_b  (io_in_b_0),
    .io_out_s (_adder_io_out_s)
  );
  adder adder_1 (
    .io_in_a  (io_in_a_1),
    .io_in_b  (io_in_b_1),
    .io_out_s (_adder_1_io_out_s)
  );
  adder adder_2 (
    .io_in_a  (io_in_a_2),
    .io_in_b  (io_in_b_2),
    .io_out_s (_adder_2_io_out_s)
  );
  adder adder_3 (
    .io_in_a  (io_in_a_3),
    .io_in_b  (io_in_b_3),
    .io_out_s (_adder_3_io_out_s)
  );
  assign io_out_s_0 = register_layer_0;
  assign io_out_s_1 = register_layer_1;
  assign io_out_s_2 = register_layer_2;
  assign io_out_s_3 = register_layer_3;
endmodule

